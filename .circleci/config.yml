---
# "Include" for unit tests definition.
unit_tests: &unit_tests
  steps:
    - checkout
    - run:
        name: Install modules and dependencies.
        command: npm install
    - run:
        name: Run unit tests.
        command: npm test
    - run:
        name: Submit coverage data to codecov.
        command: node_modules/.bin/codecov
        when: always
  working_directory: /var/code/nodejs/storage/


version: 2.0
workflows:
  version: 2
  tests:
    jobs:
      - node4
      - node6
      - node7
      - node8
      - lint:
          requires:
            - node4
            - node6
            - node7
            - node8
      - docs:
          requires:
            - node4
            - node6
            - node7
            - node8
      - system_tests:
          requires:
            - lint
            - docs
          filters:
            branches:
              only: repo-migration
      - sample_tests:
          requires:
            - lint
            - docs
          filters:
            branches:
              only: repo-migration
      - tag:
          requires:
            - system_tests
            - sample_tests
          filters:
            branches:
              only: master
  publish:
    jobs:
      - publish:
          filters:
            tags:
              only: /^v[\d.]+$/

jobs:
  node4:
    docker:
      - image: node:4
    <<: *unit_tests
  node6:
    docker:
      - image: node:6
    <<: *unit_tests
  node7:
    docker:
      - image: node:7
    <<: *unit_tests
  node8:
    docker:
      - image: node:8
    <<: *unit_tests

  lint:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: Install modules and dependencies.
          command: npm install
      - run:
          name: Run ESLint.
          command: npm run lint
    working_directory: /var/code/nodejs/storage/

  docs:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: Install modules and dependencies.
          command: npm install
      - run:
          name: Build documentation.
          command: npm run docs
    working_directory: /var/code/nodejs/storage/

  sample_tests:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: Decrypt credentials.
          command: |
            openssl aes-256-cbc -d -in .circleci/key.json.enc \
                -out .circleci/key.json \
                -k "${SYSTEM_TESTS_ENCRYPTION_KEY}"
      - run:
          name: Install the @google-cloud/storage module.
          command: cd samples/ && npm install
      - run:
          name: Run sample tests.
          command: npm run samples-test
          environment:
            GOOGLE_APPLICATION_CREDENTIALS: .circleci/key.json
      - run:
          name: Remove unencrypted key.
          command: rm .circleci/key.json
          when: always
    working_directory: /var/code/nodejs/storage/

  system_tests:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: Decrypt credentials.
          command: |
            openssl aes-256-cbc -d -in .circleci/key.json.enc \
                -out .circleci/key.json \
                -k "${SYSTEM_TESTS_ENCRYPTION_KEY}"
      - run:
          name: Decrypt second account credentials (storage-specific).
          command: |
            openssl aes-256-cbc -d -in .circleci/no-whitelist-key.json.enc \
                -out .circleci/no-whitelist-key.json \
                -k "${SYSTEM_TESTS_ENCRYPTION_KEY}"
      - run:
          name: Install modules and dependencies.
          command: npm install
      - run:
          name: Run system tests.
          command: npm run system-test
          environment:
            GOOGLE_APPLICATION_CREDENTIALS: .circleci/key.json
      - run:
          name: Remove unencrypted key.
          command: rm .circleci/key.json
          when: always
    working_directory: /var/code/nodejs/storage/

  tag:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: Tag the release if necessary.
          command: |
            export _VERSION = $(cat package.json | grep '"version"' | grep -o -P "[\\d.]+")
            if git tag --list | grep "v${_VERSION}" ; then
              echo "This tag already exists. Doing nothing."
            else
              git tag v${_VERSION}
              git push --tags
            fi
    working_directory: /var/code/nodejs/storage/

  publish:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
         name: Publish the module to npm.
         command: npm publish
    working_directory: /var/code/nodejs/storage/
